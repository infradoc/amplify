name: Node.js CI/CD Pipeline

on:
  push:
    branches:
      - feature

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Install dependencies
        run: npm install
      - name: Run tests
        run: npm test
      - name: Build the project
        run: npm run build
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: website
          path: '**/*'

  scan:
    needs: build
    runs-on: ubuntu-latest
    outputs:
      scan_success: ${{ steps.set-scan-result.outputs.scan_success }}
    if: github.ref == 'refs/heads/feature'
    steps:
      - uses: actions/checkout@v4
      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: website
          path: '**/*'
      - name: Clear SonarScanner cache
        run: rm -rf /opt/sonar-scanner/.sonar/cache
      - name: SonarQube Scan with Debug Logging
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: "https://872f6e251bea73c912c0ee14aff5aa62.serveo.net"
      - name: Set scan result and check status
        id: set-scan-result
        run: |
          if [ $? -eq 0 ]; then
            echo "::set-output name=scan_success::true"
          else
            echo "::set-output name=scan_success::false"
            exit 1
          fi
      - name: Print scan result
        run: echo "Scan success:" ${{ steps.set-scan-result.outputs.scan_success }}


  merge-to-dev:
    needs: scan
    runs-on: ubuntu-latest
    if: needs.scan.outputs.scan_success == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v2  # Consider using v2 for better performance and newer features
        with:
          fetch-depth: 0  # Fetch all history for all branches and tags

      - name: Configure Git
        run: |
          git config user.name 'github-actions[bot]'
          git config user.email 'github-actions[bot]@users.noreply.github.com'
          # Set Authorization header only for the next git operation
          git config http.https://github.com/.extraheader "AUTHORIZATION: bearer ${{ secrets.vp_token }}"
      
      - name: Fetch changes
        run: |
          git fetch origin
          # Remove the extra header after use to prevent duplication in future commands
          git config --unset http.https://github.com/.extraheader

      - name: Merge feature branch into dev
        run: git merge origin/feature  # Ensure to merge the correct branch

      - name: Push changes to dev branch
        run: git push origin HEAD:dev



  pull-request-to-main:
    needs: merge-to-dev
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/dev'
    steps:
      - name: Create pull request from dev to main using REST API (Optional)
        run: |
          curl -X POST -H "Authorization: token ${{ secrets.vp_token }}" \
          -H "Accept: application/vnd.github.v3+json" \
          https://api.github.com/repos/${{ github.repository }}/pulls \
          -d '{"title": "Merge dev branch into main", "head": "dev", "base": "main"}'

  debug-event:
    runs-on: ubuntu-latest
    steps:
      - name: Debug Event
        run: |
          echo "GitHub Event Name: ${{ github.event_name }}"
          echo "GitHub Event Action: ${{ github.event.action }}"
          echo "GitHub Pull Request Number: ${{ github.event.pull_request.number }}"
          echo "GitHub Base Ref: ${{ github.event.pull_request.base.ref }}"
          echo "GitHub Merged: ${{ github.event.pull_request.merged }}"
